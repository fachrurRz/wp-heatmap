'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _path = require('path');

var _router = require('express/lib/router');

var _router2 = _interopRequireDefault(_router);

var _universalCookieExpress = require('universal-cookie-express');

var _universalCookieExpress2 = _interopRequireDefault(_universalCookieExpress);

var _createLocaleMiddleware = require('./createLocaleMiddleware');

var _createLocaleMiddleware2 = _interopRequireDefault(_createLocaleMiddleware);

var _ensureRedirect2 = require('../utils/ensureRedirect');

var _ensureRedirect3 = _interopRequireDefault(_ensureRedirect2);

var _parseRedirectionPath = require('../utils/parseRedirectionPath');

var _parseRedirectionPath2 = _interopRequireDefault(_parseRedirectionPath);

var _locale = require('../utils/locale');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultOptions = {
  routes: {},
  redirects: {}
};

exports.default = function (app) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions,
      _ref$routes = _ref.routes,
      routes = _ref$routes === undefined ? defaultOptions.routes : _ref$routes,
      _ref$redirects = _ref.redirects,
      redirects = _ref$redirects === undefined ? defaultOptions.redirects : _ref$redirects,
      defaultLocale = _ref.defaultLocale,
      siteLocales = _ref.siteLocales,
      compression = _ref.compression;

  var router = (0, _router2.default)();
  var handle = app.getRequestHandler();
  if (!app.dev) {
    router.use(require('compression')(compression));
  }
  var newRedirects = (0, _keys2.default)(redirects).reduce(function (newRedirects, from) {
    var redirect = redirects[from];
    var newRoute = routes[redirect.to];
    newRedirects[from] = (0, _extends3.default)({
      page: newRoute && newRoute.page || redirect.to
    }, redirect);
    return newRedirects;
  }, {});
  router.use(function (req, res, next) {
    req.redirects = newRedirects;
    next();
  });
  router.use((0, _universalCookieExpress2.default)());
  if (defaultLocale && siteLocales) {
    router.use((0, _createLocaleMiddleware2.default)({ defaultLocale: defaultLocale, siteLocales: siteLocales }));
  }
  router.get('/_soya/:path(*)', function () {
    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(req, res) {
      var p;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              p = (0, _path.join)(app.dir, app.dist, 'dist', 'static', req.params.path);
              _context.next = 3;
              return app.serveStatic(req, res, p);

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined);
    }));

    return function (_x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }());
  (0, _keys2.default)(newRedirects).forEach(function (from) {
    var _ensureRedirect = (0, _ensureRedirect3.default)(newRedirects[from]),
        method = _ensureRedirect.method,
        status = _ensureRedirect.status,
        to = _ensureRedirect.to;

    router[method.toLowerCase()](from, function (req, res) {
      var localeSegment = (0, _locale.toPath)(req.locale, defaultLocale);
      var redirectionPath = (0, _parseRedirectionPath2.default)(localeSegment + to, req.params);
      res.redirect(status, redirectionPath);
    });
  });
  (0, _keys2.default)(routes).forEach(function (path) {
    var _routes$path = routes[path],
        _routes$path$method = _routes$path.method,
        method = _routes$path$method === undefined ? 'GET' : _routes$path$method,
        page = _routes$path.page;

    router[method.toLowerCase()](path, function (req, res) {
      app.render(req, res, page, (0, _assign2.default)({}, req.query, req.params));
    });
  });
  router.get('*', function (req, res) {
    return handle(req, res);
  });
  return router;
};