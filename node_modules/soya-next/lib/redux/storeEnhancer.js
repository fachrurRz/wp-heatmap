'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _redux = require('redux');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (globalReducers) {
  return function (createStore) {
    return function (reducer, preloadedState, enhancer) {
      var store = createStore(reducer, preloadedState, enhancer);
      var _replaceReducer = store.replaceReducer;
      var soyaReducers = (0, _extends3.default)({}, globalReducers);

      return (0, _extends3.default)({}, store, {
        addReducer: function addReducer(nextReducers) {
          if (!nextReducers) {
            throw new Error('Missing nextReducers argument.');
          }

          var nextReducer = nextReducers;
          if ((typeof nextReducers === 'undefined' ? 'undefined' : (0, _typeof3.default)(nextReducers)) === 'object') {
            var keys = (0, _keys2.default)(nextReducers);
            keys.forEach(function (key) {
              if (soyaReducers[key] && soyaReducers[key] !== nextReducers[key]) {
                throw new Error('Duplicate reducer name: ' + key);
              }
              soyaReducers[key] = nextReducers[key];
            });
            nextReducer = (0, _redux.combineReducers)(soyaReducers);
          }
          _replaceReducer(nextReducer);
        },
        replaceReducer: function replaceReducer(nextReducers) {
          if (!nextReducers) {
            throw new Error('Missing nextReducers argument.');
          }

          var nextReducer = nextReducers;
          if ((typeof nextReducers === 'undefined' ? 'undefined' : (0, _typeof3.default)(nextReducers)) === 'object') {
            soyaReducers = (0, _extends3.default)({}, globalReducers, nextReducers);
            nextReducer = (0, _redux.combineReducers)(soyaReducers);
          }
          _replaceReducer(nextReducer);
        },
        soya: true
      });
    };
  };
};