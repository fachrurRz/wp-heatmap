'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (_ref) {
  var t = _ref.types;

  return {
    inherits: _babelPluginSyntaxJsx2.default,
    visitor: {
      Program: {
        enter: function enter(path, state) {
          if (!state.opts.pattern) {
            throw new Error('Missing pattern plugin options');
          }
          if (typeof state.opts.pattern === 'string') {
            state.opts.pattern = new RegExp(state.opts.pattern);
          }
          state.imports = [];
          state.isStyledModulesImported = false;
        },
        exit: function exit(_ref2, state) {
          var node = _ref2.node,
              scope = _ref2.scope;

          if (state.imports.length === 0 || scope.hasBinding(_constants.STYLE_COMPONENT) || state.isStyledModulesImported) {
            return;
          }

          node.body.unshift(t.importDeclaration([t.importDefaultSpecifier(t.identifier(_constants.STYLE_COMPONENT))], t.stringLiteral(_package2.default.name + '/style')));
        }
      },
      ImportDeclaration: function ImportDeclaration(path, state) {
        var source = path.get('source').node.value;
        if (source === 'styled-modules/style') {
          state.isStyledModulesImported = true;
        } else if (state.opts.pattern.test(source)) {
          var specifiers = path.get('specifiers');
          if (specifiers.length === 0) {
            path.replaceWith(t.importDeclaration([t.importDefaultSpecifier(path.scope.generateUidIdentifier('globalStyles'))], t.stringLiteral(source)));
            return;
          }
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = specifiers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var specifier = _step.value;

              if (t.isImportDefaultSpecifier(specifier)) {
                state.imports.push(specifier.get('local').node.name);
                return;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          var id = path.scope.generateUidIdentifier('styles');
          path.replaceWith(t.importDeclaration([t.importDefaultSpecifier(id)].concat(_toConsumableArray(path.node.specifiers)), t.stringLiteral(source)));
        }
      },
      CallExpression: function CallExpression(path, state) {
        if (path.get('callee').node.name !== 'require' || t.isVariableDeclarator(path.parent)) {
          return;
        }
        var source = path.get('arguments')[0].node.value;
        if (state.opts.pattern.test(source)) {
          path.parentPath.replaceWith(t.variableDeclaration('var', [t.variableDeclarator(path.scope.generateUidIdentifier('globalStyles'), t.callExpression(t.identifier('require'), [t.stringLiteral(source)]))]));
        }
      },
      VariableDeclarator: function VariableDeclarator(path, state) {
        var subpath = path.get('init');
        if (!subpath.isCallExpression() || subpath.get('callee').node.name !== 'require') {
          return;
        }
        var source = subpath.get('arguments')[0].node.value;
        if (source === 'styled-modules/style') {
          state.isStyledModulesImported = true;
        } else if (state.opts.pattern.test(source)) {
          state.imports.push(path.get('id').node.name);
        }
      },
      JSXElement: function JSXElement(path, state) {
        if (state.imports.length === 0 || t.isJSXElement(path.parent) || path.get('openingElement').node.name.name === _constants.STYLE_COMPONENT) {
          return;
        }
        path.replaceWith(t.jSXElement(t.jSXOpeningElement(t.jSXIdentifier(_constants.STYLE_COMPONENT), [t.jSXAttribute(t.jSXIdentifier('styles'), t.jSXExpressionContainer(t.arrayExpression(state.imports.map(function (importId) {
          return t.objectExpression([t.objectProperty(t.identifier(_constants.STYLE_ID_PROP_NAME), t.memberExpression(t.identifier(importId), t.identifier(_constants.STYLE_ID_PROP_NAME))), t.objectProperty(t.identifier(_constants.STYLE_CHILD_PROP_NAME), t.memberExpression(t.identifier(importId), t.identifier(_constants.STYLE_CHILD_PROP_NAME)))]);
        }))))]), t.jSXClosingElement(t.jSXIdentifier(_constants.STYLE_COMPONENT)), [t.jSXText('\n'), path.node, t.jSXText('\n')], false));
      }
    }
  };
};

var _babelPluginSyntaxJsx = require('babel-plugin-syntax-jsx');

var _babelPluginSyntaxJsx2 = _interopRequireDefault(_babelPluginSyntaxJsx);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _constants = require('./_constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }