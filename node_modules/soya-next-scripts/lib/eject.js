'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _crossSpawn = require('cross-spawn');

var _crossSpawn2 = _interopRequireDefault(_crossSpawn);

var _createEslintConfig = require('./utils/createEslintConfig');

var _createEslintConfig2 = _interopRequireDefault(_createEslintConfig);

var _createJestConfig = require('./utils/createJestConfig');

var _createJestConfig2 = _interopRequireDefault(_createJestConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

process.on('unhandledRejection', function (err) {
  throw err;
});

var ownDependencies = ['chalk', 'cross-spawn', 'inquirer', 'webpack'];
var devDependencies = ['babel-eslint', 'eslint', 'eslint-config-marlint', 'eslint-loader', 'eslint-plugin-babel', 'eslint-plugin-flowtype', 'eslint-plugin-jsx-a11y', 'eslint-plugin-react'];
var ownDir = _path2.default.resolve(__dirname, '..');
var appDir = _path2.default.resolve(_fs2.default.realpathSync(process.cwd()));

var checkFiles = function checkFiles(files) {
  var exists = files.reduce(function (exists, file) {
    if (_fs2.default.existsSync(_path2.default.join(appDir, file))) {
      exists.push(file);
    }
    return exists;
  }, []);

  if (exists.length > 0) {
    console.log();
    console.error('Files already exists in ' + appDir + '.');
    exists.forEach(function (exist) {
      console.error('  ' + exist);
    });
    console.log();
    console.error('Please move or delete them and retry this command.');
    console.log();
    process.exit(1);
  }

  console.log();
};

var copyFiles = function copyFiles(dirs, files) {
  console.log('Copying files into ' + appDir + '.');

  dirs.forEach(function (dir) {
    if (!_fs2.default.existsSync(_path2.default.join(appDir, dir))) {
      _fs2.default.mkdirSync(_path2.default.join(appDir, dir));
    }
  });

  files.forEach(function (file) {
    var content = _fs2.default.readFileSync(_path2.default.join(ownDir, file), 'utf8');
    content = content.replace(/([\n\r])?\s*\/\/ @remove-on-eject-begin([\s\S]*?)\/\/ @remove-on-eject-end\s?/gm, '$1').trim() + '\n';
    console.log(_chalk2.default.green('+ ' + file));
    _fs2.default.writeFileSync(_path2.default.join(appDir, file), content, 'utf8');
  });

  console.log();
};

var shouldUseYarn = function shouldUseYarn() {
  var _spawn$sync = _crossSpawn2.default.sync('which', ['yarn'], { stdio: 'ignore' }),
      status = _spawn$sync.status;

  return status === 0;
};

var sortDependencies = function sortDependencies(unsortedDependencies) {
  return (0, _keys2.default)(unsortedDependencies).sort().reduce(function (sortedDependencies, dependency) {
    sortedDependencies[dependency] = unsortedDependencies[dependency];
    return sortedDependencies;
  }, {});
};

var updateDependencies = function updateDependencies(appPackage, ownPackage) {
  console.log('Updating dependencies.');

  (0, _keys2.default)(ownPackage.dependencies).filter(function (dependency) {
    return devDependencies.indexOf(dependency) === -1 && !appPackage.dependencies[dependency];
  }).forEach(function (dependency) {
    if (dependency !== ownPackage.name && ownDependencies.indexOf(dependency) === -1) {
      console.log(_chalk2.default.green('+ ' + dependency));
    }
    appPackage.dependencies[dependency] = ownPackage.dependencies[dependency];
  });
  console.log();

  console.log('Updating dev dependencies.');
  appPackage.devDependencies = appPackage.devDependencies || {};
  devDependencies.filter(function (devDependency) {
    return !appPackage.devDependencies[devDependency];
  }).forEach(function (devDependency) {
    if (ownDependencies.indexOf(devDependency) === -1) {
      console.log(_chalk2.default.green('+ ' + devDependency));
    }
    appPackage.devDependencies[devDependency] = ownPackage.dependencies[devDependency];
  });

  appPackage.dependencies = sortDependencies(appPackage.dependencies);
  appPackage.devDependencies = sortDependencies(appPackage.devDependencies);

  console.log();
};

var removeDependencies = function removeDependencies(ownPackage) {
  var cmd = shouldUseYarn() ? 'yarn' : 'npm';
  var args = ['remove', ownPackage.name].concat(ownDependencies);

  console.log('Removing dependencies.');

  var _spawn$sync2 = _crossSpawn2.default.sync(cmd, args, { stdio: 'inherit' }),
      status = _spawn$sync2.status;

  if (status !== 0) {
    process.exit(status);
  }
  console.log();
};

var updateScripts = function updateScripts(appPackage, ownPackage) {
  console.log('Updating scripts.');

  console.log(_chalk2.default.red('- ' + appPackage.scripts.eject));
  delete appPackage.scripts.eject;

  (0, _keys2.default)(appPackage.scripts).forEach(function (scriptName) {
    (0, _keys2.default)(ownPackage.bin).forEach(function (binName) {
      var regex = new RegExp(binName + ' (\\w+)', 'g');
      if (!regex.test(appPackage.scripts[scriptName])) {
        return;
      }
      console.log(_chalk2.default.red('- ' + appPackage.scripts[scriptName]));
      appPackage.scripts[scriptName] = appPackage.scripts[scriptName].replace(regex, 'node scripts/$1.js');
      console.log(_chalk2.default.green('+ ' + appPackage.scripts[scriptName]));
    });
  });

  console.log();
};

var addEslintConfig = function addEslintConfig(appPackage) {
  console.log('Adding Eslint configuration.');
  appPackage.eslintConfig = (0, _createEslintConfig2.default)(appPackage.eslintConfig);
  console.log();
};

var addJestConfig = function addJestConfig(appPackage) {
  console.log('Adding Jest configuration.');
  appPackage.jest = (0, _createJestConfig2.default)(appPackage.jest);
  console.log();
};

_inquirer2.default.prompt({
  type: 'confirm',
  name: 'shouldEject',
  message: 'Are you sure you want to eject? This action is permanent.',
  default: false
}).then(function (_ref) {
  var shouldEject = _ref.shouldEject;

  if (!shouldEject) {
    console.log('Eject aborted.');
    return;
  }

  console.log('Ejecting.');

  var dirs = ['pages', 'scripts'];
  var files = ['next.config.js'].concat(dirs.reduce(function (files, dir) {
    return files.concat(_fs2.default.readdirSync(_path2.default.join(ownDir, dir)).map(function (file) {
      return _path2.default.join(dir, file);
    }).filter(function (file) {
      return _fs2.default.lstatSync(_path2.default.join(ownDir, file)).isFile();
    }));
  }, []));

  checkFiles(files);
  copyFiles(dirs, files);

  var appPackage = require(_path2.default.join(appDir, 'package.json'));
  var ownPackage = require(_path2.default.join(ownDir, 'package.json'));

  updateDependencies(appPackage, ownPackage);
  updateScripts(appPackage, ownPackage);
  addEslintConfig(appPackage);
  addJestConfig(appPackage);

  _fs2.default.writeFileSync(_path2.default.join(appDir, 'package.json'), (0, _stringify2.default)(appPackage, null, 2) + '\n');

  removeDependencies(ownPackage);

  console.log('Ejected successfully.');
});